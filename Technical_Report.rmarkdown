---
title: "DATA 624 Project 2: Technical Report"
format: html
author: "Ali Ahmed, Andreina Arias, Kaylie Evans, Naomi Buell, and Zaneta Paulusova"
date: "`r Sys.Date()`"
---



## Instructions

*This is role playing. I am your new boss. I am in charge of production at ABC Beverage and you are a team of data scientists reporting to me. My leadership has told me that new regulations are requiring us to understand our manufacturing process, the predictive factors and be able to report to them our predictive model of PH.*

*Please use the historical data set I am providing. Build and report the factors in BOTH a technical and non-technical report. I like to use Word and Excel. Please provide your non-technical report in a business friendly readable document and your predictions in an Excel readable format. The technical report should show clearly the models you tested and how you selected your final approach.*

*Please submit both Rpubs links and .rmd files or other readable formats for technical and non-technical reports. Also submit the excel file showing the prediction of your models for pH.*

## Introduction

In this technical report, we will analyze the manufacturing process of ABC Beverage to understand the factors that influence the pH level of the product. We will build predictive models to forecast pH levels based on various predictors in the dataset. The goal is to provide insights into the manufacturing process and to create a model that can be used for future predictions.

## Setup

We will use the following packages for data analysis, modeling, and visualization.



```{r}
#| label: load packages
library(DataExplorer)
library(tidyverse)
library(readxl)
library(fpp3)
library(caret)
library(skimr)
library(doParallel)
library(RWeka)
library(rpart)
library(corrplot)
library(openxlsx)
```



Since these models take a long time to train, we'll utilize the `doParallel` package for speed.



```{r}
#| label: parallel-processing
#| warning: FALSE
#| message: FALSE

cluster <- makeCluster(
    detectCores() - 1
)

registerDoParallel(
    cluster
)
```



## Load data

First, we load the data.



```{r}
#| label: load-data

StudentData <- read_excel("StudentData.xlsx") # Training data
StudentEvaluation <- read_excel("StudentEvaluation.xlsx") # Test data
```



## Exploratory Data Analysis

We browse the data below.



```{r}
#| label: browse-data

StudentData |> skim()
StudentEvaluation |> skim()
```



Below, we will perform exploratory data analysis (EDA) to understand the dataset better. We will summarize the data, visualize distributions, and check for missing values. We will also explore relationships between predictors and the response variable (pH).



```{r}
#| label: eda

# Summary statistics
summary(StudentData)

# Histograms
plot_histogram(StudentData)

# Summarize missing data
StudentData |>
    summarise(across(everything(), ~ sum(is.na(.)))) |>
    pivot_longer(everything()) |>
    filter(value > 0) |>
    arrange(desc(value))

# Plot missing data
plot_missing(StudentData)

# Correlation matrix
correlation_matrix <- StudentData |>
    select(where(is.numeric)) |>
    cor(use = "pairwise.complete.obs")
corrplot(
    correlation_matrix,
    order = "hclust",
    # addCoef.col = "grey",
    # addCoefasPercent = TRUE,
    tl.cex = 0.7
)

# Feature plot
featurePlot(
    x = StudentData |>
        select(where(is.numeric)) |>
        select(-PH),
    y = StudentData$PH,
    plot = "scatter"
)
```



From the visualizations and summary statistics above, we can observe:

1.  Distribution patterns:
    -   Some variables show some skewness, e.g., `Filler.Speed`, `MFR`, `Oxygen.Filler`, and `Usage.cont`
    -   Many variables are bimodal, e.g., `Air.Pressurer`, `Balling`, `Balling.Lvl`, `Carb.Flow`, `Carb.Rel`, and `Density`
    -   The target variable `PH` has a relatively normal distribution
2.  Correlations:
    -   Several predictors show moderate correlations with `PH`, e.g., `Mnf Flow`, `Usage cont`, `Filler Level`, `Bowl Setpoint`, and `Pressure Setpoint`
    -   There are some strong correlations between predictors, suggesting potential multicollinearity. We should address multicollinearity in the data cleaning phase
3.  Missing values:
    -   Several variables contain missing values that will need to be addressed, especially `MFR`

## Clean and Tidy Data

Mutate variable types (e.g., convert character column `Brand Code` to factor, numeric, etc., so we can use this to forecast data).

Browse and remove outliers if necessary.

Impute and transform if necessary.

-   Andreina to impute

-   Adreina to check correlation, remove features that have correlation over some threshold

-   Remove near zero variance predictors with `nearZeroVar()`.

## Forecast

We will try the following models:

-   Linear regression models:
    -   PLS
    -   Elastic Net
-   Non-linear regression models:
    -   KNN
    -   Multivariate Adaptive Regression Splines (MARS)
-   Tree-based regression models:
    -   Single Tree
    -   Model Tree

Since the data is relatively large, we will avoid heavy models like neural networks, support vector machines (SVM), or boosted trees. Since we have a lot of predictors, we opt for models that handle feature selection or dimensionality reduction like elastic net, PLS, and tree-based models. We also want model results to be easy to interpret for our non-technical report, so we focus on elastic net, MARS, and single/model trees.

Also, because the data is relatively large, we can afford to use a training and a test set. We also center and scale the data to ensure that all predictors are on the same scale, which is important for models like PLS and elastic net.



```{r}
#| label: split-data

# <!--NB to DELETE this line after imputation section is completed-->
StudentData <- StudentData |> drop_na()

# Split the data into a training and a test set
trainingRows <- createDataPartition(
    StudentData$PH,
    p = .80,
    list = FALSE
)
StudentData_train <- StudentData[trainingRows, ]
StudentData_test <- StudentData[-trainingRows, ]

# Save training and test predictors and response variables
StudentData_train_x <- StudentData_train[, !names(StudentData_train) %in% "PH"]
StudentData_train_y <- StudentData_train$PH
StudentData_test_x <- StudentData_test[, !names(StudentData_test) %in% "PH"]
StudentData_test_y <- StudentData_test$PH
```



Fitting models to the training data below.



```{r}
#| label: pls

# Pre-process the data and tune a PLS model
ctrl <- trainControl(method = "cv", number = 10)

# Train
plsTune <- train(
    StudentData_train_x,
    StudentData_train_y,
    method = "pls",
    tuneLength = 20,
    trControl = ctrl,
    preProc = c("center", "scale")
)
plsTune

# Predict
plsPred <- predict(
    plsTune,
    newdata = StudentData_test_x
)
```

```{r}
#| label: elastic-net
#| warning: false

# <!--NB to DELETE this line after data cleaning section is completed and variable types are changed to numeric-->
StudentData_train_x <- StudentData_train_x[, sapply(
    StudentData_train_x,
    is.numeric
)]

# Train
enetGrid <- expand.grid(
    .lambda = c(0, 0.01, .1),
    .fraction = seq(.05, 1, length = 20)
)

enetTune <- train(
    StudentData_train_x,
    StudentData_train_y,
    method = "enet",
    tuneGrid = enetGrid,
    trControl = ctrl,
    preProc = c("center", "scale")
)
enetTune

# Predict
enetPred <- predict(
    enetTune,
    newdata = StudentData_test_x
)
```

```{r}
#| label: knn
#| warning: false

# Train
knnTune <- train(
    StudentData_train_x,
    StudentData_train_y,
    method = "knn",
    preProc = c("center", "scale"),
    tuneLength = 10
)
knnTune

# Predict
knnPred <- predict(
    knnTune,
    newdata = StudentData_test_x
)
```

```{r}
#| label: mars
#| warning: false

# Train
marsGrid <- expand.grid(.degree = 1:2, .nprune = 2:38)

marsTune <- train(
    StudentData_train_x,
    StudentData_train_y,
    method = "earth",
    tuneGrid = marsGrid,
    trControl = trainControl(method = "cv")
)
marsTune

marsPred <- predict(
    marsTune,
    newdata = StudentData_test_x
)
```

```{r}
#| label: single-tree
#| warning: false

# Train
rpartTune <- train(
    StudentData_train_x,
    StudentData_train_y,
    method = "rpart2",
    tuneLength = 10,
    trControl = trainControl(method = "cv")
)
rpartTune

# Predict
rpartPred <- predict(
    rpartTune,
    newdata = StudentData_test_x
)
```

```{r}
#| label: model-tree
#| warning: false

# Train
m5Tune <- train(
    StudentData_train_x,
    StudentData_train_y,
    method = "M5",
    trControl = trainControl(method = "cv"),
    control = Weka_control(M = 10)
)
m5Tune

# Predict
m5Pred <- predict(
    m5Tune,
    newdata = StudentData_test_x
)
```



## Compare model fit and select optimal model

Next, we compare fit and pick model to export.



```{r}
#| label: nonlinear-regression-models

ranking <- data.frame(
    Model = c(
        "PLS",
        "Elastic Net",
        "KNN",
        "MARS",
        "Single Tree",
        "Model Tree"
    ),
    rbind(
        postResample(pred = plsPred, obs = StudentData_test_y),
        postResample(pred = enetPred, obs = StudentData_test_y),
        postResample(pred = knnPred, obs = StudentData_test_y),
        postResample(pred = marsPred, obs = StudentData_test_y),
        postResample(pred = rpartPred, obs = StudentData_test_y),
        postResample(pred = m5Pred, obs = StudentData_test_y)
    )
) |>
    arrange(RMSE)
ranking
best <- ranking[1, 1]
```



**The `r best` model gives the optimal resampling and test set performance since it has the lowest RMSE and highest R squared.**

## Predict pH for test set



```{r}
#| label: predict-ph

# Predict pH for the test set using the best model
if (best == "PLS") {
    finalTune <- plsTune
} else if (best == "Elastic Net") {
    finalTune <- enetTune
} else if (best == "KNN") {
    finalTune <- knnTune
} else if (best == "MARS") {
    finalTune <- marsTune
} else if (best == "Single Tree") {
    finalTune <- rpartTune
} else if (best == "Model Tree") {
    finalTune <- m5Tune
}

StudentEvaluation_x <- StudentEvaluation |>
    select(-PH) |>
    drop_na() # <!--NB to DELETE this line after imputation section is completed-->

# Combine predictions with the test set
predictions <- data.frame(
    StudentEvaluation_x,
    PH = predict(finalTune, newdata = StudentEvaluation_x)
)
```



## Export



```{r}
#| label: Export to Excel

# Export predictions to Excel
write.xlsx(predictions, "PH_forecasts.xlsx")
```



## Conclusion

\[RP?\]
